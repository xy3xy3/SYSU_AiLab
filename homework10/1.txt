Code\maze_env.py
```
"""
Reinforcement learning maze example.

Red rectangle:          explorer.
Black rectangles:       hells       [reward = -1].
Yellow bin circle:      paradise    [reward = +1].
All other states:       ground      [reward = 0].

This script is the environment part of this example. The RL is in RL_q_learning.py.

View more on my tutorial page: https://morvanzhou.github.io/tutorials/
"""


import numpy as np
import time
import sys
if sys.version_info.major == 2:
    import Tkinter as tk
else:
    import tkinter as tk


UNIT = 40   # pixels
MAZE_H = 4  # grid height
MAZE_W = 4  # grid width


class Maze(tk.Tk, object):
    def __init__(self):
        super(Maze, self).__init__()
        self.action_space = ['u', 'd', 'l', 'r']
        self.n_actions = len(self.action_space)
        self.title('maze')
        self.geometry('{0}x{1}'.format(MAZE_H * UNIT, MAZE_H * UNIT))
        self._build_maze()

    def _build_maze(self):
        self.canvas = tk.Canvas(self, bg='white',
                           height=MAZE_H * UNIT,
                           width=MAZE_W * UNIT)

        # create grids
        for c in range(0, MAZE_W * UNIT, UNIT):
            x0, y0, x1, y1 = c, 0, c, MAZE_H * UNIT
            self.canvas.create_line(x0, y0, x1, y1)
        for r in range(0, MAZE_H * UNIT, UNIT):
            x0, y0, x1, y1 = 0, r, MAZE_W * UNIT, r
            self.canvas.create_line(x0, y0, x1, y1)

        # create origin
        origin = np.array([20, 20])

        # hell
        hell1_center = origin + np.array([UNIT * 2, UNIT])
        self.hell1 = self.canvas.create_rectangle(
            hell1_center[0] - 15, hell1_center[1] - 15,
            hell1_center[0] + 15, hell1_center[1] + 15,
            fill='black')
        # hell
        hell2_center = origin + np.array([UNIT, UNIT * 2])
        self.hell2 = self.canvas.create_rectangle(
            hell2_center[0] - 15, hell2_center[1] - 15,
            hell2_center[0] + 15, hell2_center[1] + 15,
            fill='black')

        # create oval
        oval_center = origin + UNIT * 2
        self.oval = self.canvas.create_oval(
            oval_center[0] - 15, oval_center[1] - 15,
            oval_center[0] + 15, oval_center[1] + 15,
            fill='yellow')

        # create red rect
        self.rect = self.canvas.create_rectangle(
            origin[0] - 15, origin[1] - 15,
            origin[0] + 15, origin[1] + 15,
            fill='red')

        # pack all
        self.canvas.pack()

    def reset(self):
        self.update()
        time.sleep(0.5)
        self.canvas.delete(self.rect)
        origin = np.array([20, 20])
        self.rect = self.canvas.create_rectangle(
            origin[0] - 15, origin[1] - 15,
            origin[0] + 15, origin[1] + 15,
            fill='red')
        # return observation
        return self.canvas.coords(self.rect)

    def step(self, action):
        s = self.canvas.coords(self.rect)
        base_action = np.array([0, 0])
        if action == 0:   # up
            if s[1] > UNIT:
                base_action[1] -= UNIT
        elif action == 1:   # down
            if s[1] < (MAZE_H - 1) * UNIT:
                base_action[1] += UNIT
        elif action == 2:   # right
            if s[0] < (MAZE_W - 1) * UNIT:
                base_action[0] += UNIT
        elif action == 3:   # left
            if s[0] > UNIT:
                base_action[0] -= UNIT

        self.canvas.move(self.rect, base_action[0], base_action[1])  # move agent

        s_ = self.canvas.coords(self.rect)  # next state

        # reward function
        if s_ == self.canvas.coords(self.oval):
            reward = 1
            done = True
            s_ = 'terminal'
        elif s_ in [self.canvas.coords(self.hell1), self.canvas.coords(self.hell2)]:
            reward = -1
            done = True
            s_ = 'terminal'
        else:
            reward = 0
            done = False

        return s_, reward, done

    def render(self):
        time.sleep(0.1)
        self.update()


def update():
    for t in range(10):
        s = env.reset()
        while True:
            env.render()
            a = 1
            s, r, done = env.step(a)
            if done:
                break

if __name__ == '__main__':
    env = Maze()
    env.after(100, update)
    env.mainloop()
```
Code\RL_q_learning.py
```
import numpy as np
import pandas as pd

class QLearning:
    def __init__(self, actions, learning_rate=0.01, reward_decay=0.9, e_greedy=0.1):
        """
        初始化 Q-learning 算法
        
        参数:
        actions: 动作列表
        learning_rate: 学习率
        reward_decay: 奖励衰减率
        e_greedy: 探索率
        """
        self.actions = actions  # 动作列表
        self.lr = learning_rate  # 学习率
        self.gamma = reward_decay  # 奖励衰减率
        self.epsilon = e_greedy  # 探索率
        self.q_table = pd.DataFrame(columns=self.actions, dtype=np.float64)  # 初始化 Q 表

    def choose_action(self, observation):
        """
        根据当前状态选择动作
        
        参数:
        observation: 当前状态
        
        返回:
        选择的动作
        """
        self.check_state_exist(observation)
        if np.random.uniform() < self.epsilon:
            # 选择最优动作
            state_action = self.q_table.loc[observation, :]
            action = np.random.choice(state_action[state_action == np.max(state_action)].index)
        else:
            # 随机选择动作
            action = np.random.choice(self.actions)
        return action

    def learn(self, s, a, r, s_):
        """
        学习更新 Q 表
        
        参数:
        s: 当前状态
        a: 当前动作
        r: 奖励
        s_: 下一个状态
        """
        self.check_state_exist(s_)
        q_predict = self.q_table.loc[s, a]
        if s_ != 'terminal':
            q_target = r + self.gamma * self.q_table.loc[s_, :].max()  # 计算目标值
        else:
            q_target = r
        self.q_table.loc[s, a] += self.lr * (q_target - q_predict)  # 更新 Q 值

    def check_state_exist(self, state):
        """
        检查状态是否存在于 Q 表中，如果不存在则添加该状态
        
        参数:
        state: 状态
        """
        if state not in self.q_table.index:
            # 添加新状态到 Q 表
            new_state = pd.DataFrame([[0]*len(self.actions)], index=[state], columns=self.q_table.columns)
            self.q_table = pd.concat([self.q_table, new_state])

```
Code\RL_sarsa.py
```
import numpy as np
import pandas as pd

class Sarsa:
    def __init__(self, actions, learning_rate=0.01, reward_decay=0.9, e_greedy=0.9):
        """
        初始化 Sarsa 算法
        
        参数:
        actions: 动作列表
        learning_rate: 学习率
        reward_decay: 奖励衰减率
        e_greedy: 探索率
        """
        self.actions = actions  # 动作列表
        self.lr = learning_rate  # 学习率
        self.gamma = reward_decay  # 奖励衰减率
        self.epsilon = e_greedy  # 探索率
        self.q_table = pd.DataFrame(columns=self.actions, dtype=np.float64)  # 初始化 Q 表

    def choose_action(self, observation):
        """
        根据当前状态选择动作
        
        参数:
        observation: 当前状态
        
        返回:
        选择的动作
        """
        self.check_state_exist(observation)
        if np.random.uniform() < self.epsilon:
            # 选择最优动作
            state_action = self.q_table.loc[observation, :]
            action = np.random.choice(state_action[state_action == np.max(state_action)].index)
        else:
            # 随机选择动作
            action = np.random.choice(self.actions)
        return action

    def learn(self, s, a, r, s_, a_):
        """
        学习更新 Q 表
        
        参数:
        s: 当前状态
        a: 当前动作
        r: 奖励
        s_: 下一个状态
        a_: 下一个动作
        """
        self.check_state_exist(s_)
        q_predict = self.q_table.loc[s, a]
        if s_ != 'terminal':
            q_target = r + self.gamma * self.q_table.loc[s_, a_]  # 计算目标值
        else:
            q_target = r
        self.q_table.loc[s, a] += self.lr * (q_target - q_predict)  # 更新 Q 值

    def check_state_exist(self, state):
        """
        检查状态是否存在于 Q 表中，如果不存在则添加该状态
        
        参数:
        state: 状态
        """
        if state not in self.q_table.index:
            # 添加新状态到 Q 表
            new_state = pd.DataFrame([[0]*len(self.actions)], index=[state], columns=self.q_table.columns)
            self.q_table = pd.concat([self.q_table, new_state])

```
Code\run_this.py
```
"""
强化学习迷宫示例。

红色矩形：          探索者。
黑色矩形：          地狱       [奖励 = -1]。
黄色圆形目标：      天堂        [奖励 = +1]。
所有其他状态：       平地        [奖励 = 0]。

此脚本是该示例的主要部分，控制了更新方法。
"""

import time
from maze_env import Maze
from RL_q_learning import QLearning
from RL_sarsa import Sarsa

# 更新函数，用于执行学习过程
def update():
    结束 = False  # 表示是否结束一局游戏
    奖励 = 0  # 表示当前步的奖励
    for episode in range(300):  # 进行300局游戏
        print(f"开始新的一局: {episode}")
        if 结束 == True and 奖励 == 1:
            time.sleep(120)  # 如果成功到达天堂，暂停120秒
        结束 = False
        # 初始化观察
        观察值 = env.reset()

        # 选择初始行动
        行动 = RL.choose_action(str(观察值))
        while True:
            # 更新环境
            env.render()

            # 强化学习采取行动并获得下一个观察值和奖励
            下一个观察值, 奖励, 完成 = env.step(行动)

            # 强化学习选择下一个行动（针对Sarsa）
            下一个行动 = RL.choose_action(str(下一个观察值))

            # 强化学习从这个转移中学习
            if isinstance(RL, QLearning):
                RL.learn(str(观察值), 行动, 奖励, str(下一个观察值))
            elif isinstance(RL, Sarsa):
                RL.learn(str(观察值), 行动, 奖励, str(下一个观察值), 下一个行动)

            # 交换观察值和行动
            观察值, 行动 = 下一个观察值, 下一个行动

            # 当本局游戏结束时，退出循环
            if 完成:
                结束 = True
                if 奖励 == 1:  # 检查奖励是否表示成功（天堂）
                    print("成功！暂停观察...")
                    env.render()
                break

    # 游戏结束
    print('游戏结束')
    env.destroy()

# 程序主入口
if __name__ == "__main__":
    env = Maze()  # 创建迷宫环境

    # 构建强化学习类
    # RL = QLearning(actions=list(range(env.n_actions)))
    RL = Sarsa(actions=list(range(env.n_actions)))  # 使用Sarsa算法

    env.after(100, update)  # 在100毫秒后开始更新
    env.mainloop()  # 进入主循环

```
