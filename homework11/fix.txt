## 实现DQN算法

在`CartPole-v0`环境中实现DQN算法。最终算法性能的评判标准：以算法收敛的reward大小、收敛所需的样本数量给分。 reward越高（至少是180，最大是200）、收敛所需样本数量越少，分数越高。 

## Submission

作业提交内容：需提交一个zip文件，包括代码以及实验报告PDF。实验报告除了需要写writing部分的内容，还需要给出reward曲线图以及算法细节。


相关环境的说明文档：https://www.gymlibrary.ml/

## 我的代码
Code\argument.py
```
def dqn_arguments(parser):
    """
    Add your arguments here if needed. The TAs will run test.py to load
    your default arguments.

    For example:
        parser.add_argument('--batch_size', type=int, default=32, help='batch size for training')
        parser.add_argument('--learning_rate', type=float, default=0.01, help='learning rate for training')
    """
    parser.add_argument('--env_name', default="CartPole-v0", help='environment name')

    parser.add_argument("--seed", default=11037, type=int)
    parser.add_argument("--hidden_size", default=16, type=int)
    parser.add_argument("--lr", default=0.02, type=float)
    parser.add_argument("--gamma", default=0.99, type=float)
    parser.add_argument("--grad_norm_clip", default=10, type=float)

    parser.add_argument("--test", default=False, type=bool)
    parser.add_argument("--use_cuda", default=True, type=bool)
    parser.add_argument("--n_frames", default=int(30000), type=int)

    return parser
```
Code\main.py
```
import argparse
import gym
from argument import dqn_arguments


def parse():
    parser = argparse.ArgumentParser(description="SYSU_RL_HW2")
    parser.add_argument('--train_dqn', default=False, type=bool, help='whether train DQN')
    parser = dqn_arguments(parser)
    args = parser.parse_args()
    return args


def run(args):
    if args.train_dqn:
        env_name = args.env_name
        env = gym.make(env_name,render_mode="rgb_array")
        from agent_dir.agent_dqn import AgentDQN
        agent = AgentDQN(env, args)
        agent.run()

#python main.py --train_dqn True --env_name CartPole-v0 --seed 11037 --hidden_size 16 --lr 0.02 --gamma 0.99
if __name__ == '__main__':
    args = parse()
    print(args)
    run(args)

```
Code\test.py
```
import gym

# 创建环境，并指定渲染模式为"human"
#human rgb_array
env = gym.make('CartPole-v0', render_mode="human")

# 初始化环境
env.reset()

for _ in range(1000):
    # 渲染环境
    env.render()

    # 随机动作
    action = env.action_space.sample()

    # 执行动作
    observation, reward, terminated, truncated, info = env.step(action)

    # 如果任务结束，则重置环境
    if terminated or truncated:
        print("Episode finished after {} timesteps".format(_ + 1))
        env.reset()

# 关闭环境
env.close()

```
Code\agent_dir\agent.py
```
class Agent(object):
    def __init__(self, env):
        self.env = env

    def make_action(self, observation, test=True):
        """
        Return predicted action of your agent
        This function must exist in agent

        Input:
            When running dqn:
                observation: np.array
                    stack 4 last preprocessed frames, shape: (84, 84, 4)

            When running pg:
                observation: np.array
                    current RGB screen of game, shape: (210, 160, 3)

        Return:
            action: int
                the predicted action from trained model
        """
        raise NotImplementedError("Subclasses should implement this!")

    def init_game_setting(self):
        """

        Testing function will call this function at the begining of new game
        Put anything you want to initialize if necessary

        """
        raise NotImplementedError("Subclasses should implement this!")

    def run(self):
        """
        Implement the interaction between agent and environment here
        """
        raise NotImplementedError

```
Code\agent_dir\agent_dqn.py
```
import os
import random
import copy
import numpy as np
import torch
from torch import nn, optim
from agent_dir.agent import Agent
from tensorboardX import SummaryWriter
from collections import deque

class QNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(QNetwork, self).__init__()
        # 定义全连接层
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, output_size)

    def forward(self, inputs):
        x = self.fc1(inputs)  # 输入层到隐藏层
        x = self.relu(x)  # 激活函数
        x = self.fc2(x)  # 隐藏层到输出层
        return x


class ReplayBuffer:
    def __init__(self, buffer_size):
        self.buffer_size = buffer_size
        self.buffer = deque(maxlen=buffer_size)

    def __len__(self):
        return len(self.buffer)

    def push(self, *transition):
        """
        添加一个transition到buffer中
        transition: (state, action, reward, next_state, done)
        """
        self.buffer.append(transition)

    def sample(self, batch_size):
        """
        随机采样一个batch的数据
        """
        return random.sample(self.buffer, batch_size)

    def clean(self):
        """
        清空buffer
        """
        self.buffer.clear()

class AgentDQN(Agent):
    def __init__(self, env, args):
        super(AgentDQN, self).__init__(env)
        self.env = env
        self.args = args

        # 设置随机种子
        self.seed = args.seed
        torch.manual_seed(self.seed)
        np.random.seed(self.seed)
        random.seed(self.seed)

        # 初始化经验回放缓冲区
        self.replay_buffer = ReplayBuffer(buffer_size=10000)
        
        # 初始化Q网络和目标Q网络
        self.q_network = QNetwork(env.observation_space.shape[0], args.hidden_size, env.action_space.n)
        self.target_q_network = copy.deepcopy(self.q_network)
        
        # 设置优化器
        self.optimizer = optim.Adam(self.q_network.parameters(), lr=args.lr)
        
        # 损失函数
        self.loss_fn = nn.MSELoss()
        
        # 其他超参数
        self.gamma = args.gamma
        self.batch_size = 32
        self.update_target_freq = 1000
        self.epsilon_start = 1.0
        self.epsilon_end = 0.1
        self.epsilon_decay = 5000
        self.epsilon = self.epsilon_start

        # Tensorboard
        self.writer = SummaryWriter('./logs')
        
        # 初始化一些状态变量
        self.num_frames = 0
        self.episode_rewards = []
        self.losses = []

    def init_game_setting(self):
        pass

    def train(self):
        state = self.env.reset()
        for frame_idx in range(1, self.args.n_frames + 1):
            # epsilon-greedy策略选择动作
            if random.random() > self.epsilon:
                state_tensor = torch.FloatTensor(state).unsqueeze(0)
                with torch.no_grad():
                    action = self.q_network(state_tensor).max(1)[1].item()
            else:
                action = self.env.action_space.sample()

            next_state, reward, terminated, truncated, _ = self.env.step(action)
            done = terminated or truncated
            self.replay_buffer.push(state, action, reward, next_state, done)
            
            state = next_state
            self.num_frames += 1
            
            if done:
                state = self.env.reset()
                self.episode_rewards.append(sum(self.episode_rewards))
                self.writer.add_scalar('reward', sum(self.episode_rewards), frame_idx)
                self.episode_rewards = []

            # 更新Q网络
            if len(self.replay_buffer) > self.batch_size:
                self.update_q_network()

            # 更新目标网络
            if frame_idx % self.update_target_freq == 0:
                self.target_q_network.load_state_dict(self.q_network.state_dict())

            # 线性减少epsilon
            self.epsilon = max(self.epsilon_end, self.epsilon - (self.epsilon_start - self.epsilon_end) / self.epsilon_decay)

        self.writer.close()

    def update_q_network(self):
        state, action, reward, next_state, done = zip(*self.replay_buffer.sample(self.batch_size))
        
        state = torch.FloatTensor(state)
        action = torch.LongTensor(action)
        reward = torch.FloatTensor(reward)
        next_state = torch.FloatTensor(next_state)
        done = torch.FloatTensor(done)

        q_values = self.q_network(state)
        next_q_values = self.target_q_network(next_state)

        q_value = q_values.gather(1, action.unsqueeze(1)).squeeze(1)
        next_q_value = next_q_values.max(1)[0]
        expected_q_value = reward + self.gamma * next_q_value * (1 - done)

        loss = self.loss_fn(q_value, expected_q_value.detach())

        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

        self.losses.append(loss.item())
        self.writer.add_scalar('loss', loss.item(), self.num_frames)

    def make_action(self, observation, test=True):
        state = torch.FloatTensor(observation).unsqueeze(0)
        with torch.no_grad():
            action = self.q_network(state).max(1)[1].item()
        return action

    def run(self):
        self.train()

```


## 任务
修复bug
tensor_new.cpp:248.)
  state = torch.FloatTensor(state)
Traceback (most recent call last):
  File "main.py", line 26, in <module>
    run(args)
  File "main.py", line 20, in run
    agent.run()
  File "E:\BaiduSyncdisk\文档类\AiLab\homework11\Code\agent_dir\agent_dqn.py", line 167, in run
    self.train()
  File "E:\BaiduSyncdisk\文档类\AiLab\homework11\Code\agent_dir\agent_dqn.py", line 124, in train
    self.update_q_network()
  File "E:\BaiduSyncdisk\文档类\AiLab\homework11\Code\agent_dir\agent_dqn.py", line 138, in update_q_network
    state = torch.FloatTensor(state)
ValueError: expected sequence of length 4 at dim 1 (got 2)